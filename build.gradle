repositories {
    mavenCentral()
}

allprojects {
    ext {
        reactorVersion = '3.1.8.RELEASE'
        hikariVersion = '2.7.8'
        hibernateVersion = '5.3.6.Final'
        fluentHibernateVersion = '0.3.1'
        junitJupiterVersion = '5.2.0'
        lombokVersion = '1.16.20'
        hsqldbVersion = '2.4.0'
        mockitoJupiterVersion = '2.21.0'
        jacocoVersion = '2.17.0'
    }
}

subprojects {
    version = '0.0.1-SNAPSHOT'
    group 'com.ibm.reactivecomponents'
    plugins.withId('java') {

        project.apply plugin: 'checkstyle'
        project.apply plugin: 'jacoco'
        project.apply plugin: 'maven-publish'
        project.apply plugin: 'signing'

        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        javadoc.failOnError = false
        task javadocJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        artifacts {
            archives sourcesJar
            archives javadocJar
        }

        publishing {
            publications {
                maven(MavenPublication) {
                    groupId project.group
                    artifactId project.name
                    version project.version

                    from components.java

                    artifact sourcesJar {
                        classifier "sources"
                    }
                    artifact javadocJar {
                        classifier "javadoc"
                    }
                    pom {
                        name = project.name
                        description = project.description
                        url = 'https://github.com/IBM/reactive-components'

                        licenses {
                            license {
                                name = 'The Apache License, Version 2.0'
                                url = 'https://www.apache.org/licenses/LICENSE-2.0'
                                distribution = 'repo'
                            }
                        }


                        scm {
                            connection = 'scm:git:https://github.com/IBM/reactive-components/' + project.name + '.git'
                            developerConnection = 'scm:git:git@github.com/IBM/reactive-components/' + project.name + '.git'
                            url = 'https://github.com/IBM/reactive-components/' + project.name + '.git'
                        }

                        developers {
                            developer {
                                id = 'FcoJavierSainz'
                                name = 'Javier Sainz'
                                email = 'fco.javier.sainz@hotmail.com'
                            }
                        }
                    }
                }
            }
            repositories {
                maven {
                    def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                    def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
                    url = project.version.endsWith('-SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                    credentials {
                        username project.hasProperty('SONATYPE_USERNAME') ? project.getProperty('SONATYPE_USERNAME') : ''
                        password project.hasProperty('SONATYPE_PASSWORD') ? project.getProperty('SONATYPE_PASSWORD') : ''
                    }
                }
            }
        }

        signing {
            sign publishing.publications.maven
        }
    }

    plugins.withId('jacoco') {

        jacocoTestReport {
            reports {
                xml.enabled = true
                html.enabled = true
            }
        }

        jacocoTestCoverageVerification {
            violationRules {
                rule {
                    limit {
                        minimum = 0.95
                    }
                }
                failOnViolation true
            }
        }
        jacocoTestCoverageVerification.mustRunAfter test
        jacocoTestReport.dependsOn test
        check.dependsOn jacocoTestReport
    }

    task lint {
        description 'Linting ...'
    }

    plugins.withId('checkstyle') {
        checkstyle {
            maxErrors 0
            ignoreFailures false
            configFile file("$rootProject.projectDir/config/checkstyle/checkstyle.xml")
            toolVersion "8.8"

        }

        lint.dependsOn checkstyleMain, checkstyleTest

        tasks.withType(Checkstyle).each { checkstyleTask ->
            checkstyleTask.doLast {
                reports.all { report ->
                    def outputFile = report.destination
                    if (outputFile.exists() && outputFile.text.contains("<error ")) {
                        throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
                    }
                }
            }
        }
    }
}
